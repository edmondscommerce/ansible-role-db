---
- set_fact:
    percona_release_name: "{{ percona_version | regex_replace('\\.', '') }}"

- name: Set Percona Release Version
  shell: "percona-release setup {{'ps'+percona_release_name}}"

- name: Install Server
  package:
    name: "{{ percona_repo_package_server }}"
    state: present

- name: Other Packages
  package:
    name: "{{ percona_repo_package_extra | default([]) }}"
    state: present

- name: MySQL Config
  lineinfile:
    path: /etc/my.cnf
    line: 'default_authentication_plugin=mysql_native_password'
    state: present
  when: percona_version >= 8.0

- name: SystemD
  systemd:
    name: mysqld
    state: started
    enabled: yes
    daemon_reload: yes

- name: Test if can connect as root
  shell: mysql --defaults-file=/root/.my.cnf -NBe "select 1"
  register: can_connect
  ignore_errors: true

- include_tasks: set-root-password.yml
  when: can_connect is failed

- name: Setup root mytop
  copy:
    content: |
      user=root
      pass={{ mysql_root_password }}
      host=localhost
      db=information_schema
      delay=5
      port=3306
      batchmode=0
      header=1
      color=1
      idle=1
    dest: /root/.mytop
    owner: root
    group: root
    mode: 0600

- name: Remove insecure stuff
  shell: >
    mysql
    --defaults-file=/root/.my.cnf
    -NBe "
    DELETE FROM mysql.user WHERE User='';
    DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
    DROP DATABASE IF EXISTS test;
    DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
    FLUSH PRIVILEGES;
    "

- name: create databases if not exists
  shell: >
    mysql
    --defaults-file=/root/.my.cnf
    -e "
    CREATE DATABASE IF NOT EXISTS "{{ item }}" CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    "
  with_items: "{{ mysql_databases }}"

- name: Setup MySQL Users
  shell: >
    mysql
    --defaults-file=/root/.my.cnf
    -e "
    CREATE USER IF NOT EXISTS '{{ item.name }}'@'{{ item.host }}' IDENTIFIED BY '{{ item.password }}';
    GRANT {{ item.grant }} on {{ item.grant_db_tables }} TO '{{ item.name }}'@'{{ item.host }}';
    FLUSH PRIVILEGES;
    "
  with_items: "{{ mysql_users }}"
