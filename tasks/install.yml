---
- set_fact:
    percona_release_name: "{{ percona_version | regex_replace('\\.', '') }}"
    percona_version_string: "{{ percona_version | string }}"

- name: Set Percona Release Version
  shell: "percona-release setup {{'ps'+percona_release_name}}"

- name: Check for installed Mysql version
  shell: |
    mysqld --version 2>/dev/null | grep -Po "(\d+\.\d)" || echo "";
  register: installed_mysql_version

- debug:
    msg:
      - "Current version: {{ installed_mysql_version.stdout }}"
      - "Desired Version: {{ percona_version_string }}"

- name: Remove Mysql if incorrect version is installed
  shell: |
    systemctl stop mysql
    yum -y remove percona-server* Percona-Server* mysql* MariaDB*
  when:
    - installed_mysql_version.stdout != ''
    - installed_mysql_version.stdout != percona_version_string


- name: Install Server
  package:
    name: "{{ percona_repo_package_server }}"
    state: present

- name: Other Packages
  package:
    name: "{{ percona_repo_package_extra | default([]) }}"
    state: present

- name: Fix Logrotate
  copy:
    dest: /etc/logrotate.d/mysql
    content: |
      /var/log/mysqld.log {
              create 600 mysql mysql
              notifempty
              daily
              rotate 5
              missingok
              compress
          postrotate
      	# just if mysqld is really running
      	if test -x /usr/bin/mysqladmin && \
      	   /usr/bin/mysqladmin ping &>/dev/null
      	then
      	   /usr/bin/mysqladmin flush-logs
      	fi
          endscript
      }

- name: MySQL Config
  lineinfile:
    path: /etc/my.cnf
    line: 'default_authentication_plugin=mysql_native_password'
    state: present
  when: percona_version >= 8.0

- name: Disable Binary Logging
  lineinfile:
    regexp: '^# disable_log_bin'
    line: 'disable_log_bin'
    insertafter: '^\[mysqld\]'
    path: /etc/my.cnf
  when: percona_version >= 8.0

- name: Set InnoDB Buffer Pool to 70% RAM
  lineinfile:
    regexp: '^# innodb_buffer_pool_size'
    line: 'innodb_buffer_pool_size = {{ (ansible_memory_mb.real.total * 0.7)|int }}M'
    insertafter: '^\[mysqld\]'
    path: /etc/my.cnf
  when: percona_version >= 8.0

- name: Skip Name Resolve
  lineinfile:
    regexp: '^skip-name-resolve'
    line: 'skip-name-resolve'
    insertafter: '^\[mysqld\]'
    path: /etc/my.cnf
  when: percona_version >= 8.0

- name: Setup root mytop
  copy:
    content: |
      user=root
      pass={{ mysql_root_password }}
      host=localhost
      db=information_schema
      delay=5
      port=3306
      batchmode=0
      header=1
      color=1
      idle=1
    dest: /root/.mytop
    owner: root
    group: root
    mode: 0600

- name: SystemD
  systemd:
    name: mysqld
    state: started
    enabled: yes
    daemon_reload: yes

- name: Test if can connect as root
  shell: mysql --defaults-file=/root/.my.cnf -NBe "select 1"
  register: can_connect
  ignore_errors: true

- include_tasks: set-root-password.yml
  when: can_connect is failed

- name: Remove insecure stuff
  shell: >
    mysql
    --defaults-file=/root/.my.cnf
    -NBe "
    DELETE FROM mysql.user WHERE User='';
    DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
    DROP DATABASE IF EXISTS test;
    DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
    FLUSH PRIVILEGES;
    "

- name: Run Mysql Upgrade
  command: mysql_upgrade
  ignore_errors: true

- name: create databases if not exists
  shell: >
    mysql
    --defaults-file=/root/.my.cnf
    -e "
    CREATE DATABASE IF NOT EXISTS "{{ item }}" CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    "
  with_items: "{{ mysql_databases }}"

- name: Setup MySQL Users
  shell: >
    mysql
    --defaults-file=/root/.my.cnf
    -e "
    CREATE USER IF NOT EXISTS '{{ item.name }}'@'{{ item.host }}' IDENTIFIED BY '{{ item.password }}';
    GRANT {{ item.grant }} on {{ item.grant_db_tables }} TO '{{ item.name }}'@'{{ item.host }}';
    FLUSH PRIVILEGES;
    "
  with_items: "{{ mysql_users }}"

